{"version":3,"sources":["gop.jpg","Container.tsx","Simulator.tsx","Logo.tsx","Logos.tsx","App.tsx","Menu.tsx","Content.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ContainerBackground","Simulator","Logo","className","Logos","Pages","Container","children","backgroundClass","containerBackgroundClasses","classNames","PRIMARY","SECONDARY","MenuItem","href","text","page","active","onChange","menuItemClasses","onClick","e","preventDefault","onItemClick","Menu","activePage","src","logoSrc","title","alt","SIMULATOR","LOGOS","Content","App","useState","setPage","pageElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,iC,4MCI/BC,E,+CCEGC,G,MAJa,WACxB,OAAO,4CCWIC,G,MAXQ,WACnB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,eAAd,aACA,uBAAGA,UAAU,cAAb,kBCMDC,G,MAVS,WACpB,OACI,yBAAKD,UAAU,SACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,kCHLAH,O,qBAAAA,I,0BAAAA,M,KASZ,IIJYK,EJkBGC,EAd6B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAC/CC,EAA6BC,IAAW,wBAAyB,CACnE,iCAAkCF,IAAoBR,EAAoBW,QAC1E,mCAAoCH,IAAoBR,EAAoBY,YAGhF,OACI,yBAAKT,UAAU,aACX,yBAAKA,UAAWM,IACfF,I,wBKPPM,EAAoC,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAM7DC,EAAkBT,IAAW,aAAc,CAC7C,qBAAsBO,IAG1B,OACI,uBAAGH,KAAMA,EAAMX,UAAWgB,EAAiBC,QAAS,SAACC,GAAD,OAVpC,SAACA,EAAoDL,GACrEK,EAAEC,iBACFJ,EAASF,GAQkDO,CAAYF,EAAGL,KACrED,IAwCES,EA9BmB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,WAAYP,EAAe,EAAfA,SAC7C,OACI,yBAAKf,UAAU,gBACX,yBACIA,UAAU,cACVuB,IAAKC,IACLC,MAAM,4BACNC,IAAI,8BAGR,yBAAK1B,UAAU,QACX,kBAAC,EAAD,CACIY,KAAK,YACLD,KAAK,aACLG,OAAQQ,IAAepB,EAAMyB,UAC7Bd,KAAMX,EAAMyB,UACZZ,SAAUA,IAEd,kBAAC,EAAD,CACIH,KAAK,QACLD,KAAK,SACLG,OAAQQ,IAAepB,EAAM0B,MAC7Bf,KAAMX,EAAM0B,MACZb,SAAUA,OCrDfc,G,MAJW,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACzB,OAAO,yBAAKJ,UAAU,WAAWI,M,SFKzBF,O,yBAAAA,I,kBAAAA,M,KAmBG4B,MAdf,WAAgB,IAAD,EACaC,mBAAgB7B,EAAMyB,WADnC,mBACJd,EADI,KACEmB,EADF,KAGLC,EAAcpB,IAASX,EAAMyB,UAAY,kBAAC,EAAD,MAAgB,kBAAC,EAAD,MACzDtB,EAAkBQ,IAASX,EAAMyB,UAAY9B,EAAoBW,QAAUX,EAAoBY,UAErG,OACI,kBAAC,EAAD,CAAWJ,gBAAiBA,GACxB,kBAAC,EAAD,CAAMU,SAAUiB,EAASV,WAAYT,IACrC,kBAAC,EAAD,KAAUoB,KGXFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b637282.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gop.f0241d4d.jpg\";","import React from 'react';\nimport './Container.css';\nimport classNames from 'classnames';\n\nexport enum ContainerBackground {\n    PRIMARY,\n    SECONDARY,\n}\n\nexport interface ContainerProps {\n    backgroundClass: ContainerBackground;\n}\n\nconst Container: React.FC<ContainerProps> = ({ children, backgroundClass }) => {\n    const containerBackgroundClasses = classNames('container__background', {\n        'container__background--primary': backgroundClass === ContainerBackground.PRIMARY,\n        'container__background--secondary': backgroundClass === ContainerBackground.SECONDARY,\n    });\n\n    return (\n        <div className='container'>\n            <div className={containerBackgroundClasses} />\n            {children}\n        </div>\n    );\n};\n\nexport default Container;\n","import React from 'react';\n\nconst Simulator: React.FC = () => {\n    return <div>Simulator</div>;\n};\n\nexport default Simulator;\n","import React from 'react';\nimport './Logo.css';\n\nconst Logo: React.FC = () => {\n    return (\n        <div className='logo-wrapper'>\n            <div className='logo'>\n                <h4 className='logo__title'>Some logo</h4>\n                <p className='logo__text'>To be done</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Logo;\n","import React from 'react';\nimport Logo from './Logo';\nimport './Logos.css';\n\nconst Logos: React.FC = () => {\n    return (\n        <div className=\"logos\">\n            <Logo />\n            <Logo />\n            <Logo />\n        </div>\n    );\n};\n\nexport default Logos;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Simulator from './Simulator';\nimport Logos from './Logos';\nimport Container from './Container';\nimport Menu from './Menu';\nimport Content from './Content';\nimport { ContainerBackground } from './Container';\n\nexport enum Pages {\n    SIMULATOR,\n    LOGOS,\n}\n\nfunction App() {\n    const [page, setPage] = useState<Pages>(Pages.SIMULATOR);\n\n    const pageElement = page === Pages.SIMULATOR ? <Simulator /> : <Logos />;\n    const backgroundClass = page === Pages.SIMULATOR ? ContainerBackground.PRIMARY : ContainerBackground.SECONDARY;\n\n    return (\n        <Container backgroundClass={backgroundClass}>\n            <Menu onChange={setPage} activePage={page} />\n            <Content>{pageElement}</Content>\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { Pages } from './App';\nimport './Menu.css';\nimport logoSrc from './gop.jpg';\nimport classNames from 'classnames';\nimport { act } from 'react-dom/test-utils';\n\nexport interface MenuItemProps {\n    href: string;\n    text: string;\n    page: Pages;\n    active: boolean;\n    onChange: (page: Pages) => void;\n}\n\nconst MenuItem: React.FC<MenuItemProps> = ({ href, text, page, active, onChange }) => {\n    const onItemClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>, page: Pages) => {\n        e.preventDefault();\n        onChange(page);\n    };\n\n    const menuItemClasses = classNames('menu__item', {\n        'menu__item--active': active,\n    });\n\n    return (\n        <a href={href} className={menuItemClasses} onClick={(e) => onItemClick(e, page)}>\n            {text}\n        </a>\n    );\n};\n\nexport interface MenuProps {\n    activePage: Pages;\n    onChange: (page: Pages) => void;\n}\n\nconst Menu: React.FC<MenuProps> = ({ activePage, onChange }) => {\n    return (\n        <div className='menu-wrapper'>\n            <img\n                className='header-logo'\n                src={logoSrc}\n                title='$GoP - Game of Presidents'\n                alt='$GoP - Game of Presidents'\n            />\n\n            <div className='menu'>\n                <MenuItem\n                    text='Simulator'\n                    href='#simulator'\n                    active={activePage === Pages.SIMULATOR}\n                    page={Pages.SIMULATOR}\n                    onChange={onChange}\n                />\n                <MenuItem\n                    text='Logos'\n                    href='#logos'\n                    active={activePage === Pages.LOGOS}\n                    page={Pages.LOGOS}\n                    onChange={onChange}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React from 'react';\nimport './Content.css';\n\nconst Content: React.FC = ({ children }) => {\n    return <div className='content'>{children}</div>;\n};\n\nexport default Content;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}